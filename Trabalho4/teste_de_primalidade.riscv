.data
    pula_linha:    .string "\n"
    entrada:       .space 1000
    msgEntradaInvalida: .string "Entrada invalida.\n"
    msgNao:        .string "nao\n"
    msgSim:        .string "sim\n"

.text
.globl main

main:
    # Ler a entrada
    li a7, 5               # syscall for reading integer
    ecall
    mv t0, a0              # Move o valor lido para t0

    # Verificar se o número é natural (> 0)
    li t1, 1
    blt t0, t1, entrada_invalida   # Se t0 < 1, vá para entrada_invalida

    # Verificar se o número é maior que 1
    li t1, 1
    ble t0, t1, nao         # Se t0 <= 1, vá para nao (1 não é primo)

    # Verificar se o número é primo
    li t2, 2
    beq t0, t2, sim         # Se t0 == 2, vá para sim (2 é primo)

    # Loop para verificar divisores
    li t3, 2               # Iniciar divisor em 2
verifica_primo:
    mul t4, t3, t3         # t4 = t3 * t3
    bgt t4, t0, sim        # Se t4 > t0, vá para sim (não encontrou divisores)
    rem t4, t0, t3         # t4 = t0 % t3
    beqz t4, nao           # Se resto é 0, não é primo
    addi t3, t3, 1         # Incrementa o divisor
    j verifica_primo       # Continua o loop

entrada_invalida:
    # Imprimir "Entrada invalida."
    la a0, msgEntradaInvalida
    li a7, 4               # syscall for print string
    ecall
    j fim

nao:
    # Imprimir "nao"
    la a0, msgNao
    li a7, 4               # syscall for print string
    ecall
    j fim

sim:
    # Imprimir "sim"
    la a0, msgSim
    li a7, 4               # syscall for print string
    ecall

fim:
    # Encerrar o programa
    li a7, 10              # syscall for exit
    ecall
